{"version":3,"sources":["utils/helpers.ts","components/WikiLayersTitle.tsx","utils/DispatchContext.tsx","components/StartScreen.tsx","utils/themeReducer.ts","customMuiTheme.tsx","Root.tsx","reportWebVitals.ts","index.tsx"],"names":["isRecord","obj","Object","prototype","toString","call","slice","toLowerCase","isQueryPage","pageid","title","extract","hasCoords","page","Boolean","coordinates","getCoordinate","coord","lon","lat","pageToOlFeature","feature","Feature","id","pageTitle","visibility","selected","geometry","Point","fromLonLat","definedProps","arr","entries","filter","undefined","assign","map","k","v","useStyles","makeStyles","theme","createStyles","fontWeight","fontFamily","textDecoration","color","palette","text","primary","WikiLayersTitle","variant","classes","className","align","DispatchContext","React","Error","useToggleDarkMode","dispatch","type","root","display","flexGrow","alignItems","justifyContent","StartScreen","LinearProgress","initialThemeState","darkMode","useInitialThemeState","prefersDarkMode","useMediaQuery","stored","localStorage","getItem","storedThemeState","partialStoredThemeState","JSON","parse","themeReducer","state","action","customMuiTheme","createMuiTheme","blue","secondary","red","App","Root","themeState","themeDispatch","setItem","stringify","responsiveFontSizes","main","lighten","ThemeProvider","CssBaseline","Provider","value","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.9f3cde81.chunk.js","sourcesContent":["import Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\nimport { fromLonLat } from 'ol/proj';\nimport { Coordinate } from 'ol/coordinate';\nimport { QueryPage, QueryPageWithCoord, PageFeature } from '../types';\n\nexport function isRecord(obj: any): obj is Record<string, unknown> {\n  return Object.prototype.toString.call(obj).slice(8, -1).toLowerCase() === 'object';\n}\n\nexport function isQueryPage(obj: any): obj is QueryPage {\n  return isRecord(obj) && typeof obj.pageid === 'number' && typeof obj.title === 'string' && typeof obj.extract === 'string';\n}\n\nexport function hasCoords(page: QueryPage): page is QueryPageWithCoord {\n  return Boolean(page.coordinates);\n}\n\nexport function pageToFeature(title: string, page: QueryPageWithCoord): PageFeature {\n  return {\n    title,\n    page,\n  };\n}\n\nexport function getCoordinate({ coordinates }: QueryPageWithCoord): Coordinate {\n  const [coord] = coordinates;\n  return [coord.lon, coord.lat];\n}\n\nexport function pageToOlFeature(feature: PageFeature): Feature {\n  const { title, pageid } = feature.page;\n  return new Feature({\n    pageid,\n    title: feature.title,\n    id: pageid,\n    pageTitle: title,\n    visibility: true,\n    selected: false,\n    geometry: new Point(fromLonLat(getCoordinate(feature.page))),\n  });\n}\n\nexport function definedProps<T extends Record<string, unknown>>(obj: T | Partial<T>): Partial<T> {\n  function fromEntries(arr: [keyof T, unknown][]): T | Partial<T> {\n    return Object.assign({}, ...arr.map(([k, v]) => ({ [k]: v })));\n  }\n  return fromEntries(Object.entries(obj).filter(([k, v]) => v !== undefined));\n}\n","import * as React from 'react';\nimport Typography, { TypographyProps } from '@material-ui/core/Typography';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    title: {\n      fontWeight: 100,\n      fontFamily: 'sans-serif',\n      textDecoration: 'none',\n      color: theme.palette.text.primary,\n    },\n  })\n);\n\nfunction WikiLayersTitle({ variant }: TypographyProps): JSX.Element {\n  const classes = useStyles();\n  return (\n    <Typography className={classes.title} align=\"center\" variant={variant} color=\"primary\">\n      WikiLayers\n    </Typography>\n  );\n}\n\nexport default WikiLayersTitle;\n","import * as React from 'react';\n\nimport { ThemeAction } from './themeReducer';\n\nexport const DispatchContext = React.createContext<React.Dispatch<ThemeAction>>(() => {\n  throw new Error();\n});\n\n// カスタムフックの作成\nexport function useToggleDarkMode(): () => void {\n  const dispatch = React.useContext(DispatchContext);\n  return React.useCallback(() => dispatch({ type: 'TOGGLE_DARKMODE' }), [dispatch]);\n}\n","import * as React from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport WikiLayersTitle from './WikiLayersTitle';\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexGrow: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n  })\n);\n\nfunction StartScreen(): JSX.Element {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <div>\n        <WikiLayersTitle variant=\"h2\" />\n        <LinearProgress />\n      </div>\n    </div>\n  );\n}\n\nexport default StartScreen;\n","import * as React from 'react';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { isRecord } from './helpers';\n\nexport interface ThemeState {\n  darkMode: boolean;\n}\nexport type ThemeAction = { type: 'TOGGLE_DARKMODE' };\n\nexport const initialThemeState: ThemeState = {\n  darkMode: false,\n};\n\nexport function partialStoredThemeState(obj: any): Partial<ThemeState> {\n  if (!isRecord(obj)) return {};\n  const { darkMode } = obj;\n  return {\n    darkMode: typeof darkMode === 'boolean' ? darkMode : undefined,\n  };\n}\n\nexport function useInitialThemeState(): ThemeState {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  return React.useMemo(() => {\n    const stored = localStorage.getItem('wikilayers:ThemeState');\n    const storedThemeState = stored ? partialStoredThemeState(JSON.parse(stored)) : null;\n    return storedThemeState\n      ? {\n          ...initialThemeState,\n          ...storedThemeState,\n        }\n      : {\n          ...initialThemeState,\n          darkMode: prefersDarkMode ?? initialThemeState.darkMode,\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n}\n\nexport function themeReducer(state: ThemeState, action: ThemeAction): ThemeState {\n  switch (action.type) {\n    case 'TOGGLE_DARKMODE':\n      return {\n        ...state,\n        darkMode: !state.darkMode,\n      };\n    default:\n      throw new Error();\n  }\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport { blue, red } from '@material-ui/core/colors';\n\nconst customMuiTheme = createMuiTheme({\n  palette: {\n    primary: blue,\n    secondary: red,\n  },\n});\n\nexport default customMuiTheme;\n","import * as React from 'react';\nimport { ThemeProvider, createMuiTheme, responsiveFontSizes, lighten } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport StartScreen from './components/StartScreen';\nimport { themeReducer, useInitialThemeState } from './utils/themeReducer';\nimport { DispatchContext } from './utils/DispatchContext';\nimport customMuiTheme from './customMuiTheme';\n\nconst App = React.lazy(() => import('./App'));\n\nexport default function Root(): JSX.Element {\n  const initialThemeState = useInitialThemeState();\n  const [themeState, themeDispatch] = React.useReducer(themeReducer, initialThemeState);\n  const { darkMode } = themeState;\n\n  React.useEffect(() => {\n    localStorage.setItem('wikilayers:ThemeState', JSON.stringify(themeState));\n  }, [themeState]);\n\n  const theme = React.useMemo(() => {\n    return responsiveFontSizes(\n      createMuiTheme({\n        ...customMuiTheme,\n        palette: {\n          type: darkMode ? 'dark' : 'light',\n          primary: {\n            ...customMuiTheme.palette.primary,\n            main: darkMode ? lighten(customMuiTheme.palette.primary.main, 0.4) : customMuiTheme.palette.primary.main,\n          },\n          secondary: {\n            ...customMuiTheme.palette.secondary,\n            main: darkMode ? lighten(customMuiTheme.palette.secondary.main, 0.4) : customMuiTheme.palette.secondary.main,\n          },\n        },\n      })\n    );\n  }, [darkMode]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <DispatchContext.Provider value={themeDispatch}>\n        <React.Suspense fallback={<StartScreen />}>\n          <App />\n        </React.Suspense>\n      </DispatchContext.Provider>\n    </ThemeProvider>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './Root';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}